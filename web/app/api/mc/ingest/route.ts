import { NextResponse } from 'next/server';import { redis } from '../../../../lib/redis';import { findCardIdByUsername, moveCard } from '../../../../lib/keycrm';import type { Campaign, Condition } from '../../../../lib/types'
function auth(req:Request){const auth=req.headers.get('authorization');const url=new URL(req.url);const token=(auth&&auth.startsWith('Bearer '))?auth.slice(7):(url.searchParams.get('token')||'');return token&&token===process.env.MC_TOKEN}
function matchCondition(cond:Condition,payload:any){if(!cond)return false;if(cond.field==='any')return true;const source=(cond.field==='text')?(payload.text||payload.message||''):'';const v=(cond.value||'').toLowerCase();const s=String(source||'').toLowerCase();if(cond.op==='equals')return s===v;return s.includes(v)}
export async function POST(req:Request){if(!auth(req))return NextResponse.json({ok:false,error:'unauthorized'},{status:401});const body=await req.json().catch(()=>({}));const username=body.username||body.ig_username||body.user?.username||body.sender?.username||body.user?.name;const text=body.text||body.message||'';if(!username)return NextResponse.json({ok:false,error:'missing username'},{status:400});const mapKey=`ig:map:${username}`;let card_id=await redis.get<string>(mapKey);if(!card_id){card_id=await findCardIdByUsername(username);if(card_id)await redis.set(mapKey,card_id)}if(!card_id)return NextResponse.json({ok:false,error:'card not found for username'},{status:404});const ids=await redis.zrange<string[]>('campaigns:index',0,-1);const actions:any[]=[];for(const cid of ids){const raw=await redis.get<string>(`campaigns:${cid}`);if(!raw)continue;const c=JSON.parse(raw) as Campaign;if(!c.enabled)continue;let variant:null|'v1'|'v2'|'exp'=null;if(matchCondition(c.v1_condition,{text}))variant='v1';else if(matchCondition(c.v2_condition,{text}))variant='v2';if(!variant)continue;let to_pipeline=c.exp_to_pipeline_id,to_status=c.exp_to_status_id;if(variant==='v1'){to_pipeline=c.v1_to_pipeline_id;to_status=c.v1_to_status_id}if(variant==='v2'){to_pipeline=c.v2_to_pipeline_id;to_status=c.v2_to_status_id}if(!to_pipeline||!to_status)continue;await moveCard(card_id,String(to_pipeline),String(to_status));const freshRaw=await redis.get<string>(`campaigns:${c.id}`);if(freshRaw){const obj=JSON.parse(freshRaw) as Campaign;if(variant==='v1')obj.v1_count++;if(variant==='v2')obj.v2_count++;if(variant==='exp')obj.exp_count++;await redis.set(`campaigns:${obj.id}`,JSON.stringify(obj))}actions.push({campaign_id:c.id,variant,moved_to:{pipeline_id:to_pipeline,status_id:to_status}})}return NextResponse.json({ok:true,username,card_id,actions})}
