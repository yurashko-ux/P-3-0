import { NextResponse } from 'next/server';import { redis } from '../../../../lib/redis';import type { Campaign } from '../../../../lib/types'
export async function GET(_:Request,{params}:{params:{id:string}}){const raw=await redis.get<string>(`campaigns:${params.id}`);if(!raw)return NextResponse.json({ok:false,error:'not found'},{status:404});return NextResponse.json({ok:true,item:JSON.parse(raw)})}
export async function PUT(req:Request,{params}:{params:{id:string}}){const raw=await redis.get<string>(`campaigns:${params.id}`);if(!raw)return NextResponse.json({ok:false,error:'not found'},{status:404});const item=JSON.parse(raw) as Campaign;const patch=await req.json().catch(()=>({}));const upd={...item,...patch};await redis.set(`campaigns:${params.id}`,JSON.stringify(upd));return NextResponse.json({ok:true,item:upd})}
export async function DELETE(_:Request,{params}:{params:{id:string}}){await redis.del(`campaigns:${params.id}`);await redis.zrem('campaigns:index',params.id);return NextResponse.json({ok:true})}
export async function POST(req:Request,ctx:any){const body=await req.formData();if(body.get('_method')==='delete'){return DELETE(req,ctx)}return NextResponse.json({ok:false,error:'unsupported'},{status:400})}
